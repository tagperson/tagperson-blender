from .config import CfgNode as CN

_C = CN()


_C.FIX_SEED = 19


_C.SOURCE = CN()
_C.SOURCE.ROOT = '/path/to/.mhx2'
_C.SOURCE.OBJ_POSE_NAME = 'Standing02'


# background relative
_C.BACKGROUND = CN()
_C.BACKGROUND.ROOT = '/path/to/background_dir/'
_C.BACKGROUND.NUM_LIMIT = -1
_C.BACKGROUND.FIX_RESOLUTION_PER_IMAGE = CN()
_C.BACKGROUND.FIX_RESOLUTION_PER_IMAGE.ENABLED = False
_C.BACKGROUND.FIX_RESOLUTION_PER_IMAGE.SAVE_JSON_PATH = '/path/to/background_fix.json'
_C.BACKGROUND.USE_CAMERA_GROUP = False
_C.BACKGROUND.USE_EMPTY_BACKGROUND = False

# camera relative
_C.CAMERA = CN()
_C.CAMERA.ROTATION_EULER_X_BIAS = CN()
_C.CAMERA.ROTATION_EULER_X_BIAS.BIAS = 0.34
_C.CAMERA.ROTATION_EULER_X_BIAS.RANDOM = CN()
_C.CAMERA.ROTATION_EULER_X_BIAS.RANDOM.ENABLE = True
_C.CAMERA.ROTATION_EULER_X_BIAS.RANDOM.LOWER_BOUND = -0.025
_C.CAMERA.ROTATION_EULER_X_BIAS.RANDOM.UPPER_BOUND = 0.025
_C.CAMERA.ROTATION_EULER_X_BIAS.RANDOM.USE_GAUSS = False
_C.CAMERA.ROTATION_EULER_X_BIAS.RANDOM.MU = 0
_C.CAMERA.ROTATION_EULER_X_BIAS.RANDOM.SIGMA = 0.05
_C.CAMERA.ROTATION_EULER_Z_BIAS = CN()
_C.CAMERA.ROTATION_EULER_Z_BIAS.BIAS = 0.0
_C.CAMERA.ROTATION_EULER_Z_BIAS.RANDOM = CN()
_C.CAMERA.ROTATION_EULER_Z_BIAS.RANDOM.ENABLE = True
_C.CAMERA.ROTATION_EULER_Z_BIAS.RANDOM.LOWER_BOUND = -0.05 # abandon
_C.CAMERA.ROTATION_EULER_Z_BIAS.RANDOM.UPPER_BOUND = 0.05 # abandon
_C.CAMERA.ROTATION_EULER_Z_BIAS.RANDOM.USE_GAUSS = False
_C.CAMERA.ROTATION_EULER_Z_BIAS.RANDOM.MU = 0
_C.CAMERA.ROTATION_EULER_Z_BIAS.RANDOM.SIGMA = 0.01
# add in 20210704
_C.CAMERA.ROTATION_EULER_Y_BIAS = CN()
_C.CAMERA.ROTATION_EULER_Y_BIAS.BIAS = 0.0
_C.CAMERA.ROTATION_EULER_Y_BIAS.RANDOM = CN()
_C.CAMERA.ROTATION_EULER_Y_BIAS.RANDOM.ENABLE = True
_C.CAMERA.ROTATION_EULER_Y_BIAS.RANDOM.USE_GAUSS = False
_C.CAMERA.ROTATION_EULER_Y_BIAS.RANDOM.MU = 0
_C.CAMERA.ROTATION_EULER_Y_BIAS.RANDOM.SIGMA = 0.01

_C.CAMERA.ELEV = CN()
_C.CAMERA.ELEV.BASE = 0
_C.CAMERA.ELEV.RANDOM = CN()
_C.CAMERA.ELEV.RANDOM.ENABLED = True
_C.CAMERA.ELEV.RANDOM.LOWER_BOUND = 10
_C.CAMERA.ELEV.RANDOM.UPPER_BOUND = 45
_C.CAMERA.ELEV.RANDOM.USE_GAUSS = False
_C.CAMERA.ELEV.RANDOM.MU = 0.0
_C.CAMERA.ELEV.RANDOM.SIGMA = 0.01

_C.CAMERA.DISTANCE = CN()
_C.CAMERA.DISTANCE.PERSON_HEIGHT_FACTOR = 1.40
_C.CAMERA.DISTANCE.RANDOM = CN()
_C.CAMERA.DISTANCE.RANDOM.LOWER_BOUND = -2.0
_C.CAMERA.DISTANCE.RANDOM.UPPER_BOUND = 2.0

_C.CAMERA.OCCATIONAL_JUMP = CN()
_C.CAMERA.OCCATIONAL_JUMP.ENABLE = False
_C.CAMERA.OCCATIONAL_JUMP.PROB = 0.1
_C.CAMERA.OCCATIONAL_JUMP.ROTATION_EULER_X_BIAS = CN()
_C.CAMERA.OCCATIONAL_JUMP.ROTATION_EULER_X_BIAS.BIAS = 0.60
_C.CAMERA.OCCATIONAL_JUMP.DISTANCE = CN()
_C.CAMERA.OCCATIONAL_JUMP.DISTANCE.PERSON_HEIGHT_FACTOR = 1.00

_C.CAMERA.AVERAGE_AZIM = CN()
_C.CAMERA.AVERAGE_AZIM.ENABLED = False

# light
_C.LIGHT = CN()
_C.LIGHT.AZIM = CN()
_C.LIGHT.AZIM.RANDOM_LOWER_BOUND = -45
_C.LIGHT.AZIM.RANDOM_UPPER_BOUND = 45
_C.LIGHT.ELEV = CN()
_C.LIGHT.ELEV.BASE = 75
_C.LIGHT.ELEV.RANDOM = CN()
_C.LIGHT.ELEV.RANDOM.ENABLED = False
_C.LIGHT.ELEV.RANDOM.LOWER_BOUND = 0
_C.LIGHT.ELEV.RANDOM.UPPER_BOUND = 0
_C.LIGHT.ELEV.RANDOM.USE_GAUSS = True
_C.LIGHT.ELEV.RANDOM.SIGMA = 0
_C.LIGHT.ELEV.RANDOM.MU = 0
_C.LIGHT.DISTANCE = CN()
_C.LIGHT.DISTANCE.RATIO_TO_CAMERA_DISTANCE = 0.666
_C.LIGHT.DISTANCE.USE_FIXED = CN()
_C.LIGHT.DISTANCE.USE_FIXED.ENABLED = False
_C.LIGHT.DISTANCE.USE_FIXED.FIXED_VALUE = 20


# camera render
_C.RENDER = CN()
_C.RENDER.RESOLUTION_PERCENTAGE = CN()
_C.RENDER.RESOLUTION_PERCENTAGE.BASE = 50
_C.RENDER.RESOLUTION_PERCENTAGE.RANDOM_UPPER_BOUND = 40
_C.RENDER.RESOLUTION_PERCENTAGE.RANDOM_LOWER_BOUND = -40
_C.RENDER.RESOLUTION_X = CN()
_C.RENDER.RESOLUTION_X.BASE = 100
_C.RENDER.RESOLUTION_X.RANDOM_UPPER_BOUND = 20
_C.RENDER.RESOLUTION_X.RANDOM_LOWER_BOUND = -20
_C.RENDER.RESOLUTION_Y = CN()
_C.RENDER.RESOLUTION_Y.BASE = 256
_C.RENDER.RESOLUTION_Y.RANDOM_UPPER_BOUND = 40
_C.RENDER.RESOLUTION_Y.RANDOM_LOWER_BOUND = -40
# if USE_RATIO, the X.RANDOM and Y.RANDOM can be merge into one `RATION.RANDOM`
#   if USE_RATIO.ENABLED == True, the RESOLUTION_X.RANDOM_UPPER_BOUND and RESOLUTION_X.RANDOM_LOWER_BOUND should be `0`
_C.RENDER.RESOLUTION_Y.USE_RATIO = CN()
_C.RENDER.RESOLUTION_Y.USE_RATIO.ENABLED = False
_C.RENDER.RESOLUTION_Y.USE_RATIO.RANDOM_UPPER_BOUND = 1.5
_C.RENDER.RESOLUTION_Y.USE_RATIO.RANDOM_LOWER_BOUND = 1.0

# composite
_C.COMPOSITE = CN()
_C.COMPOSITE.GAMMA = CN()
_C.COMPOSITE.GAMMA.RANDOM = CN()
_C.COMPOSITE.GAMMA.RANDOM.ENABLE = False
_C.COMPOSITE.GAMMA.RANDOM.BASE = 1.0
# [0.5, 2.0] is fine, 0.5 is light, 2.0 black
_C.COMPOSITE.GAMMA.RANDOM.LOWER_BOUND = -0.5
_C.COMPOSITE.GAMMA.RANDOM.UPPER_BOUND = 1.0
_C.COMPOSITE.GAMMA.RANDOM.CAMERA_BASE = False
_C.COMPOSITE.GAMMA.RANDOM.CAMERA_VALUES = []

_C.COMPOSITE.SHIELD = CN()
_C.COMPOSITE.SHIELD.ROOT = 'data/shield/'
_C.COMPOSITE.SHIELD.ENABLE = False
_C.COMPOSITE.SHIELD.PROB = 0.05
_C.COMPOSITE.SHIELD.SCALE = CN()
_C.COMPOSITE.SHIELD.SCALE.WIDTH_SCALE = CN()
_C.COMPOSITE.SHIELD.SCALE.WIDTH_SCALE.BASE = 1.0
_C.COMPOSITE.SHIELD.SCALE.WIDTH_SCALE.RANDOM = CN()
_C.COMPOSITE.SHIELD.SCALE.WIDTH_SCALE.RANDOM.LOWER_BOUND = 1.0
_C.COMPOSITE.SHIELD.SCALE.WIDTH_SCALE.RANDOM.UPPER_BOUND = 1.0
_C.COMPOSITE.SHIELD.SCALE.HEIGHT_SCALE = CN()
_C.COMPOSITE.SHIELD.SCALE.HEIGHT_SCALE.BASE = 0.5
_C.COMPOSITE.SHIELD.SCALE.HEIGHT_SCALE.RANDOM = CN()
_C.COMPOSITE.SHIELD.SCALE.HEIGHT_SCALE.RANDOM.LOWER_BOUND = 1.0
_C.COMPOSITE.SHIELD.SCALE.HEIGHT_SCALE.RANDOM.UPPER_BOUND = 1.0
_C.COMPOSITE.SHIELD.TRANSFORM = CN()
_C.COMPOSITE.SHIELD.TRANSFORM.X_SCALE = CN()
_C.COMPOSITE.SHIELD.TRANSFORM.X_SCALE.BASE = 0.0
_C.COMPOSITE.SHIELD.TRANSFORM.X_SCALE.RANDOM = CN()
_C.COMPOSITE.SHIELD.TRANSFORM.X_SCALE.RANDOM.LOWER_BOUND = 1.0
_C.COMPOSITE.SHIELD.TRANSFORM.X_SCALE.RANDOM.UPPER_BOUND = 1.0
_C.COMPOSITE.SHIELD.TRANSFORM.Y_SCALE = CN()
_C.COMPOSITE.SHIELD.TRANSFORM.Y_SCALE.BASE = -0.25
_C.COMPOSITE.SHIELD.TRANSFORM.Y_SCALE.RANDOM = CN()
_C.COMPOSITE.SHIELD.TRANSFORM.Y_SCALE.RANDOM.LOWER_BOUND = 1.0
_C.COMPOSITE.SHIELD.TRANSFORM.Y_SCALE.RANDOM.UPPER_BOUND = 1.0

_C.COMPOSITE.SHIELD_V2 = CN()
_C.COMPOSITE.SHIELD_V2.ENABLED = False
_C.COMPOSITE.SHIELD_V2.ROOT = 'data/shield_v2/'
_C.COMPOSITE.SHIELD_V2.PROB = 0.05
_C.COMPOSITE.SHIELD_V2.NUM_LIMIT = -1
_C.COMPOSITE.SHIELD_V2.FIX_RESOLUTION_PER_IMAGE = CN()
_C.COMPOSITE.SHIELD_V2.FIX_RESOLUTION_PER_IMAGE.ENABLED = False
_C.COMPOSITE.SHIELD_V2.FIX_RESOLUTION_PER_IMAGE.SAVE_JSON_PATH = '/path/to/shield_fix.json'

# pose relative
_C.POSE = CN()
_C.POSE.ROOT = '/path/to/pose_dir/'
_C.POSE.SERIALS = ['02_01', '02_02']


_C.PROCESS = CN()
_C.PROCESS.FIRST_INDEX = 1
_C.PROCESS.LAST_INDEX = 343
_C.PROCESS.IMAGE_COUNT_PER_ID = 24
_C.PROCESS.IMAGE_COUNT_PER_ID_RANDOM_LOWER_BOUND = 0
_C.PROCESS.IMAGE_COUNT_PER_ID_RANDOM_UPPER_BOUND = 0
_C.PROCESS.CONTINUOUS_COUNT = 1
_C.PROCESS.IMAGE_COUNT_PER_CAMERA = 3
# repeat one image for one background
_C.PROCESS.IMAGE_COUNT_PER_BACKGROUND = 1
_C.PROCESS.POSE_CHANGE = False
# if the output folder contains images of current mesh_id x `IMAGE_COUNT_PER_ID`, continue
_C.PROCESS.RESUME = False

# 20210814_refactor_process
_C.PROCESS.TOTAL_CAMERA_COUNT = 30
_C.PROCESS.CAMERA_COUNT_PER_ID = 10  #



_C.OPTION = CN()
_C.OPTION.APPLY_CAMERA_WORLD_COLOR = CN()
_C.OPTION.APPLY_CAMERA_WORLD_COLOR.ENABLE = False
_C.OPTION.APPLY_CAMERA_WORLD_COLOR.VALUES = []
_C.OPTION.APPLY_CAMERA_WORLD_COLOR.APPLY_TO_BACKGROUND = False
_C.OPTION.APPLY_CAMERA_WORLD_COLOR.RANDOM = CN()
_C.OPTION.APPLY_CAMERA_WORLD_COLOR.RANDOM.ENABLED = False
_C.OPTION.APPLY_CAMERA_WORLD_COLOR.RANDOM.LOWER_BOUND = 0.5
_C.OPTION.APPLY_CAMERA_WORLD_COLOR.RANDOM.UPPER_BOUND = 1.0
_C.OPTION.APPLY_CAMERA_WORLD_COLOR.RANDOM.INDEPENDENT = False
_C.OPTION.APPLY_CAMERA_WORLD_COLOR.BACKGROUND = CN()
_C.OPTION.APPLY_CAMERA_WORLD_COLOR.BACKGROUND.ENABLED = False
_C.OPTION.APPLY_CAMERA_WORLD_COLOR.BACKGROUND.VALUES = []



# add partner
_C.PARTNER = CN()
_C.PARTNER.ENABLED = False
_C.PARTNER.PROB = 0.05
_C.PARTNER.PROB_IN_ONE_PERSON = 0.3
_C.PARTNER.COUNT = 1
_C.PARTNER.SELECT_MESH_ID_MIN = 1
_C.PARTNER.SELECT_MESH_ID_MAX = 656

# attribute
_C.ATTRIBUTE = CN()
_C.ATTRIBUTE.ENABLED = False
# attribute distribution
_C.ATTRIBUTE.USE_DISTRIBUTION_FILE = CN()
_C.ATTRIBUTE.USE_DISTRIBUTION_FILE.ENABLED = False
_C.ATTRIBUTE.USE_DISTRIBUTION_FILE.FILE_PATH = ''
_C.ATTRIBUTE.USE_DISTRIBUTION_FILE.LIMIT_FIELDS = []
_C.ATTRIBUTE.USE_DISTRIBUTION_FILE.RANDOM_SAMPLE = CN()
_C.ATTRIBUTE.USE_DISTRIBUTION_FILE.RANDOM_SAMPLE.ENABLED = False


# experiment, expand 
_C.EXPERIMENT = CN()
_C.EXPERIMENT.EXPAND = CN()
_C.EXPERIMENT.EXPAND.ENABLED = False
_C.EXPERIMENT.EXPAND.CAMERA_DISTANCE = CN()
_C.EXPERIMENT.EXPAND.CAMERA_DISTANCE.ENABLED = False
_C.EXPERIMENT.EXPAND.CAMERA_DISTANCE.RANDOM = CN()
_C.EXPERIMENT.EXPAND.CAMERA_DISTANCE.RANDOM.UPPER_BOUND = 5
_C.EXPERIMENT.EXPAND.CAMERA_DISTANCE.RANDOM.LOWER_BOUND = -5
_C.EXPERIMENT.EXPAND.CAMERA_DISTANCE.EXPAND_NUM = 1
_C.EXPERIMENT.EXPAND.CAMERA_ELEV = CN()
_C.EXPERIMENT.EXPAND.CAMERA_ELEV.ENABLED = False
_C.EXPERIMENT.EXPAND.CAMERA_ELEV.RANDOM = CN()
_C.EXPERIMENT.EXPAND.CAMERA_ELEV.RANDOM.UPPER_BOUND = 10
_C.EXPERIMENT.EXPAND.CAMERA_ELEV.RANDOM.LOWER_BOUND = -10
_C.EXPERIMENT.EXPAND.CAMERA_ELEV.EXPAND_NUM = 1
_C.EXPERIMENT.EXPAND.GAMMA = CN()
_C.EXPERIMENT.EXPAND.GAMMA.ENABLED = False
_C.EXPERIMENT.EXPAND.GAMMA.EXPAND_NUM = 1

# debug
_C.DEBUG = CN()
_C.DEBUG.ONE_IMAGE_PER_PERSON = False

_C.OUTPUT_DIR = "logs/"
# if the paths below is specific, directly use them rather than `OUTPUT_DIR`
# This is to avoid tedious copy, paste and link operation
_C.OUTPUT_DIR_FOR_IMAGE = ''
_C.OUTPUT_DIR_FOR_ATTRIBUTE = ''



